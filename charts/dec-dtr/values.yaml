###############################################################
# Copyright (c) 2023 Robert Bosch Manufacturing Solutions GmbH
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
###############################################################

registry:
  keycloak:
    type: NodePort
    args: [ "kc.sh import --file /opt/keycloak/data/import/default-realm-import.json; kc.sh start-dev --hostname-strict=false --proxy=edge" ]

  enablePostgres: false
  registry:
    replicaCount: 1
    imagePullPolicy: Never
    imagePullSecrets:
      - name: machineuser-pull-secret-ro
    containerPort: 4243
    host: localhost
    ## If 'authentication' is set to false, no OAuth authentication is enforced
    authentication: true
    idpIssuerUri: http://registry-keycloak/realms/default-realm
    idpClientId: default-client
    tenantId: demo-tenant
    service:
      port: 8080
      type: NodePort
    dataSource:
      driverClassName: org.postgresql.Driver
      ## The url, user, and password parameter will be ignored if 'enablePostgres' is set to true.
      ## In that case the postgresql auth parameters are used.
      url: jdbc:postgresql://postgresql:5432/registry
      user: registryuser
      password: ioueohg8o734dfsd
    ingress:
      enabled: true
      tls: false
      urlPrefix: /registry
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/x-forwarded-prefix: /registry
    resources:
      limits:
        memory: "1024Mi"
      requests:
        memory: "512Mi"

postgresql:
  fullnameOverride: postgresql
  service:
    ports:
      postgresql: 5432
  auth:
    postgresPassword: root
  primary:
    initdb:
      scripts: 
        init.sql: |
          CREATE USER edcprovider WITH ENCRYPTED PASSWORD 'oqerhf8734hewrin';
          ALTER USER edcprovider CREATEDB;
          CREATE DATABASE provider;
          ALTER DATABASE provider OWNER TO edcprovider;

          CREATE USER edcconsumer WITH ENCRYPTED PASSWORD 'oqerhf8734hewrin';
          ALTER USER edcconsumer CREATEDB;
          CREATE DATABASE consumer;
          ALTER DATABASE consumer OWNER TO edcconsumer;
          
          CREATE USER registryuser WITH ENCRYPTED PASSWORD 'ioueohg8o734dfsd';
          ALTER USER registryuser CREATEDB;
          CREATE DATABASE registry;
          ALTER DATABASE registry OWNER TO registryuser;

vault:
  enabled: true
  fullnameOverride: edc-vault
  server:
    dev:
      enabled: true
      devRootToken: "root"
    postStart:
      - "sh"
      - "-c"
      - |
        { 
        
        sleep 15

        /bin/vault kv put secret/data-encryption-aes-keys content=H7j47H6vVQQOv/hbdAYz+w==

        cat << EOF | /bin/vault kv put secret/daps-private-key content=-
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQChsB/ec/OGTiz7
        ZACi5VttsY9ycowLRXL3QV79UXPEY7IiBnVsd+3XYvfBRFLepWvzrvbqygYJL8m9
        12csky1pAJA62YAaphR7YVOV8JECdvXbKx5qYg8X13N/cdNE0KKej6fex/beecfn
        LqZlpll3lAXGXL6rXJrQTnkEP9Zc31u9u3ns4GbLaPqZHfVCC8Syqfh26r98YsDr
        TqatcZD2lJ14rDC/KjSjtrnwRedC7LJV6UOoJSApv2kZ5GyZu4KF7eBPGA7Ah0To
        sA31geDnCze7+yHU9q3JiXW4HFuIePocrIdMYtZOx7Lw1J9jivqvEcrExSU/zdag
        RDfn4Iv3AgMBAAECggEAG9iwdGh13YCjQJyFe4iSyX6WHPjbY6mPVkQc7vXTQVSG
        PlPsb0TsYnb6AoAY4Z2NzQcqIV+v0G85iIeLjmK+pGHjdS82X+CQkHs/oQgwgUMp
        rphrgZjnzoxdqOpan3RrPXGyUK0RuFky837WS5VtvSlyISqh7/Nf+lY5g2DXM2FC
        TX3W9RUdk00+4d7o9xjjshSg1CRu1mk+zFS/1j6MMZ8DAVKBdOqJ6EuLTVvC1UYA
        4+zPT6/TCO/63w+rfOgtQZcQljhINJU39WGZaLyNR29ngWwe4rkz/jdFemM0ypbB
        pZ72slOMOJi9fMXX5sxU0PaGFXGQhAa0hjTWSVIwSQKBgQDVAVd+cqHFDsHmfRNs
        49b2yd5rKAS9DwMpN686SSFvghVBnXyX50IldPBVuNbekC1/UpUa3Q8Zv5nqYRFh
        inWekliJw4XxPSgTWfZU+YO/HsfAaKu8BdGq+0sCMsF0nOeQqS/xtXbPDpBPfpAy
        FVsWfPmTuHzJ3fDeK/neCVfcfQKBgQDCUw6UDdnG/gXy5ueEWnHMUobDP6xyFtIs
        C3Qk8mxV+vffCQkFkPu0fD4twwLLzI+/OnNFs0SYatlnm/ByrQbVaxUBU41AfYKz
        HshEDm7mvnj4ytMZWuzhy5th0JhRaXUlZlFese3xnCSm7uoSyzjQUgtalvwU8cqh
        vzhal2sYgwKBgQDOLTpPfw3u/FXbkH3ZDMDqqIPOHTJY/csFfozyUg83LCb/GD2d
        m49/Si3IC96QF+ayM3F4SzlupvOI1uRIEgm/r9BbqRJha9z6vj2eCtbnjBe1uptg
        qBFG+26jdhWjlqzebaWmxQt3aJVvHQbeM6WzoszBm/XOQDICG3cE4O5W0QKBgFyx
        O6n5tWDLONE1vUeP0Opyjx/BVqORKS2jRQJ+tJiKvwOfjrMeBkKAZTR06feGmybP
        Xb7olRbTGOLoKli5GiJhEsLwNNeHRvnj/AkijVn5j0C1lt5oVcga1AJjetSSpjNx
        y+yMmQB/x6ftHLBcSbxs9kd+772Z3FstGFd2FLq7AoGASI9MvZOTRlfsXqss0mDd
        vFmxy/2Kqr3rrusFHnelLvQa3v12S7s/4E6ksKWOFBvCSfhsRY82YJuow06momw2
        YM24Tzw1VFGGifFEznW8F0hK3Ij3vzvhO6Oh2ZjZlHsmbvqekn0BQPZSRrLTQTVl
        MIMoELklHXjss+vJvKD7qr4=
        -----END PRIVATE KEY-----
        EOF
        
        cat << EOF | /bin/vault kv put secret/daps-public-key content=-
        -----BEGIN CERTIFICATE-----
        MIIDqzCCApOgAwIBAgIJAPg82Gk+2TJKMA0GCSqGSIb3DQEBCwUAME8xCzAJBgNV
        BAYTAkRFMQ8wDQYDVQQHDAZCZXJsaW4xFTATBgNVBAoMDEV4YW1wbGUsIExMQzEY
        MBYGA1UEAwwPRXhhbXBsZSBDb21wYW55MB4XDTIzMDYxMjE0MzYzN1oXDTMzMDYw
        OTE0MzYzN1owTzELMAkGA1UEBhMCREUxDzANBgNVBAcMBkJlcmxpbjEVMBMGA1UE
        CgwMRXhhbXBsZSwgTExDMRgwFgYDVQQDDA9FeGFtcGxlIENvbXBhbnkwggEiMA0G
        CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQChsB/ec/OGTiz7ZACi5VttsY9ycowL
        RXL3QV79UXPEY7IiBnVsd+3XYvfBRFLepWvzrvbqygYJL8m912csky1pAJA62YAa
        phR7YVOV8JECdvXbKx5qYg8X13N/cdNE0KKej6fex/beecfnLqZlpll3lAXGXL6r
        XJrQTnkEP9Zc31u9u3ns4GbLaPqZHfVCC8Syqfh26r98YsDrTqatcZD2lJ14rDC/
        KjSjtrnwRedC7LJV6UOoJSApv2kZ5GyZu4KF7eBPGA7Ah0TosA31geDnCze7+yHU
        9q3JiXW4HFuIePocrIdMYtZOx7Lw1J9jivqvEcrExSU/zdagRDfn4Iv3AgMBAAGj
        gYkwgYYwHQYDVR0OBBYEFERC+B2ghjNXbYrF+RatmrQZevgmMB8GA1UdIwQYMBaA
        FERC+B2ghjNXbYrF+RatmrQZevgmMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgWgMCwG
        CWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTANBgkq
        hkiG9w0BAQsFAAOCAQEAICYu6u/9mpi61p+UnfGeFNpbCC0gVQ/XaN1m5IgGyoym
        oMI3d0OTlVm3V5gcv09+bLU6aYm/63rCXyrYGAIz6DChqc9bu3Hl4qVNPnt7ifao
        svEAh5DbPE6ytz9SnQcHcbViGGwpT+kN+X4C6dAnfYS6e4+7lIFuh38lX2SvXD0K
        8EhNQxvDh3Xhd04m/QQWl9CSWVdZ64nDP7KCJMhJP/Cfjcvzezahxe7jaf3AIHTg
        upWyfGPArrmoRy/mClrDmhktvdnL/wl76+0Zspy2WRScIwfj4V2/X1RCeV6+rEIb
        1jFnLLGiNnnJHAEnREnBJUxe0AJHnThhh8Q3q2E6EQ==
        -----END CERTIFICATE-----
        EOF
        }

daps:
  persistence:
    storageClass: ""
  enabled: true
  fullnameOverride: "ids-daps"
  daps:
    secret:
      clientId: clientId
      clientSecret: clientSecret
  ingress:
    enabled: true
    host: daps-host
    tls:
      enabled: true
      certMgr:
        enabled: true
        issuer: letsencrypt-prod

provider:
  enabled: true
  fullnameOverride: "provider-edc"
  install:
    daps: false
    postgresql: false
    vault: false
  participant:
    id: "PROVIDER"
  backendService:
    httpProxyTokenReceiverUrl: http://localhost
  # dataplane:
  #   url:
  #     public: http://provider-edc-dataplane:8081/api/public
  controlplane:
    env:
      EDC_TRANSFER_PROXY_TOKEN_VALIDITY_SECONDS: 86400
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: http://provider-edc-controlplane:8082/validation/token
      EDC_DATAPLANE_SELECTOR_DEFAULTPLANE_PROPERTIES: >-
        { 
          "publicApiUrl": "http://provider-edc-dataplane:8081/api/public"
        }
    endpoints:
      default:
        port: "8080"
        path: /api
      management:
        port: "8181"
        path: /management
        authKey: password
      metrics:
        port: "9090"
        path: /metrics
    ingresses:
      - enabled: false
        hostname:
        annotations: { }
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - ids
          - management
          - protocol
          - default
        className: nginx
        tls:
          enabled: false
  dataplane:
    ingresses:
      - enabled: false
        hostname:
        annotations: { }
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - public
          - proxy
        className: nginx
        tls:
          enabled: false
  postgresql:
    fullnameOverride: "provider-postgresql"
    enabled: true
    jdbcUrl: jdbc:postgresql://postgresql:5432/provider
    auth:
      database: "provider"
      username: "edcprovider"
      password: "oqerhf8734hewrin"
    username: edcprovider
    password: oqerhf8734hewrin
  daps:
    clientId: 44:42:F8:1D:A0:86:33:57:6D:8A:C5:F9:16:AD:9A:B4:19:7A:F8:26:keyid:44:42:F8:1D:A0:86:33:57:6D:8A:C5:F9:16:AD:9A:B4:19:7A:F8:26
    url: http://ids-daps:4567
  vault:
    fullnameOverride: "provider-vault"
    hashicorp:
      enabled: true
      token: root
      url: http://edc-vault:8200
      secret: /v1/secret
    secretNames:
      transferProxyTokenSignerPrivateKey: daps-private-key
      transferProxyTokenSignerPublicKey: daps-public-key
      transferProxyTokenEncryptionAesKey: data-encryption-aes-keys
      dapsPrivateKey: daps-private-key
      dapsPublicKey: daps-public-key

consumer:
  enabled: true
  install:
    daps: false
    postgresql: false
    vault: false
  participant:
    id: "CONSUMER"
  fullnameOverride: "consumer-edc"
  backendService:
    httpProxyTokenReceiverUrl: http://localhost
  # dataplane:
  #   url:
  #     public: http://consumer-edc-dataplane:8081/api/public
  controlplane:
    env:
      # edc.transfer.proxy.token.validity.seconds
      EDC_TRANSFER_PROXY_TOKEN_VALIDITY_SECONDS: 86400
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: http://consumer-edc-controlplane:8082/validation/token
      EDC_DATAPLANE_SELECTOR_DEFAULTPLANE_PROPERTIES: >-
        { 
          "publicApiUrl": "http://consumer-edc-dataplane:8081/api/public"
        }
    endpoints:
      default:
        port: "8080"
        path: /api
      management:
        port: "8181"
        path: /management
        authKey: password
      metrics:
        port: "9090"
        path: /metrics
    ingresses:
      - enabled: false
        hostname:
        annotations: { }
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - ids
          - management
          - protocol
          - default
        className: nginx
        tls:
          enabled: false
  dataplane:
    ingresses:
      - enabled: false
        hostname:
        annotations: { }
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - public
          - proxy
        className: nginx
        tls:
          enabled: false
  postgresql:
    fullnameOverride: "consumer-postgresql"
    enabled: true
    jdbcUrl: jdbc:postgresql://postgresql:5432/consumer
    auth:
      database: "consumer"
      username: "edcconsumer"
      password: "oqerhf8734hewrin"
    username: edcconsumer
    password: oqerhf8734hewrin
  daps:
    clientId: 44:42:F8:1D:A0:86:33:57:6D:8A:C5:F9:16:AD:9A:B4:19:7A:F8:26:keyid:44:42:F8:1D:A0:86:33:57:6D:8A:C5:F9:16:AD:9A:B4:19:7A:F8:26
    url: http://ids-daps:4567
  vault:
    fullnameOverride: "consumer-vault"
    hashicorp:
      enabled: true
      token: root
      url: http://edc-vault:8200
      secret: /v1/secret
    secretNames:
      transferProxyTokenSignerPrivateKey: daps-private-key
      transferProxyTokenSignerPublicKey: daps-public-key
      transferProxyTokenEncryptionAesKey: data-encryption-aes-keys
      dapsPrivateKey: daps-private-key
      dapsPublicKey: daps-public-key
